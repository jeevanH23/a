{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPQiWSQmjCfI7WT0jf5I5E",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jeevanH23/a/blob/main/face\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "kLFhfXaox-vc",
        "outputId": "6d1e6687-43e8-4156-9122-976b8773ce35"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-9423f846-4c2e-4c4d-9ba1-67f8ac5f4a4c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-9423f846-4c2e-4c4d-9ba1-67f8ac5f4a4c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-530ef2f84b73>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Step 1: Upload the images (this will open a file picker)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Step 2: List the uploaded files to check their names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m(target_dir)\u001b[0m\n\u001b[1;32m     70\u001b[0m   \"\"\"\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m   \u001b[0;31m# First result is always an indication that the file picker has completed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m   result = _output.eval_js(\n\u001b[0m\u001b[1;32m    165\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[1;32m    166\u001b[0m           \u001b[0minput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_id\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     if (\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "import cv2\n",
        "import dlib\n",
        "import numpy as np\n",
        "import shutil\n",
        "import bz2\n",
        "\n",
        "# Step 1: Upload the images (this will open a file picker)\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Step 2: List the uploaded files to check their names\n",
        "for filename in uploaded.keys():\n",
        "    print(f'Uploaded file: {filename}')\n",
        "\n",
        "# Step 3: Access the uploaded files by their names and specify the correct paths\n",
        "# Use the correct path to your uploaded source and target images\n",
        "source_img_path = \"C:/Users/hrith/Downloads/81945-3840x2160-desktop-4k-ariana-grande-wallpaper.jpg\"  # Replace with your uploaded file's name\n",
        "target_img_path = \"C:/Users/hrith/Downloads/1533673-3840x2160-desktop-4k-ana-de-armas-wallpaper-image.jpg\"  # Replace with your uploaded file's name\n",
        "\n",
        "# Load the shape predictor file for face landmarks (assuming it's uploaded too)\n",
        "bz2_file_path = '/content/shape_predictor_68_face_landmarks (1).dat.bz2'\n",
        "dat_file_path = '/content/shape_predictor_68_face_landmarks.dat'\n",
        "\n",
        "# Step 4: Extract the shape predictor file if needed (assuming it's in .bz2 format)\n",
        "with bz2.BZ2File(bz2_file_path, 'rb') as f_in:\n",
        "    with open(dat_file_path, 'wb') as f_out:\n",
        "        shutil.copyfileobj(f_in, f_out)\n",
        "\n",
        "print(\"Extraction complete!\")\n",
        "\n",
        "# Load the shape predictor model\n",
        "predictor = dlib.shape_predictor(dat_file_path)\n",
        "detector = dlib.get_frontal_face_detector()\n",
        "\n",
        "# Function to swap faces (same as before)\n",
        "def extract_index_nparray(nparray):\n",
        "    index = None\n",
        "    for num in nparray[0]:\n",
        "        index = num\n",
        "        break\n",
        "    return index\n",
        "\n",
        "def face_swap(source_image, target_image):\n",
        "    img1 = cv2.imread(source_image)\n",
        "    img2 = cv2.imread(target_image)\n",
        "\n",
        "    # Check if images were loaded successfully\n",
        "    if img1 is None:\n",
        "        print(f\"Error: Could not load image {source_image}\")\n",
        "        return None\n",
        "    if img2 is None:\n",
        "        print(f\"Error: Could not load image {target_image}\")\n",
        "        return None\n",
        "\n",
        "    img1_gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n",
        "    img2_gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)\n",
        "\n",
        "    # Detect faces in images\n",
        "    faces1 = detector(img1_gray)\n",
        "    faces2 = detector(img2_gray)\n",
        "\n",
        "    if len(faces1) == 0 or len(faces2) == 0:\n",
        "        print(\"Face not detected in one of the images.\")\n",
        "        return None\n",
        "\n",
        "    # Get landmarks for both images\n",
        "    landmarks1 = predictor(img1_gray, faces1[0])\n",
        "    landmarks2 = predictor(img2_gray, faces2[0])\n",
        "\n",
        "    points1 = []\n",
        "    points2 = []\n",
        "\n",
        "    for n in range(68):\n",
        "        x1, y1 = landmarks1.part(n).x, landmarks1.part(n).y\n",
        "        x2, y2 = landmarks2.part(n).x, landmarks2.part(n).y\n",
        "        points1.append((x1, y1))\n",
        "        points2.append((x2, y2))\n",
        "\n",
        "    points1 = np.array(points1, np.int32)\n",
        "    points2 = np.array(points2, np.int32)\n",
        "\n",
        "    hull1 = cv2.convexHull(points1)\n",
        "    hull2 = cv2.convexHull(points2)\n",
        "\n",
        "    mask = np.zeros_like(img2_gray)\n",
        "    cv2.fillConvexPoly(mask, hull2, 255)\n",
        "\n",
        "    img2_face = cv2.bitwise_and(img2, img2, mask=mask)\n",
        "\n",
        "    rect = cv2.boundingRect(hull2)\n",
        "    subdiv = cv2.Subdiv2D(rect)\n",
        "    subdiv.insert(points2.tolist())\n",
        "    triangles = subdiv.getTriangleList()\n",
        "    triangles = np.array(triangles, dtype=np.int32)\n",
        "\n",
        "    for t in triangles:\n",
        "        pt1 = (t[0], t[1])\n",
        "        pt2 = (t[2], t[3])\n",
        "        pt3 = (t[4], t[5])\n",
        "\n",
        "        index1 = extract_index_nparray(np.where((points2 == pt1).all(axis=1)))\n",
        "        index2 = extract_index_nparray(np.where((points2 == pt2).all(axis=1)))\n",
        "        index3 = extract_index_nparray(np.where((points2 == pt3).all(axis=1)))\n",
        "\n",
        "        if index1 is None or index2 is None or index3 is None:\n",
        "            continue\n",
        "\n",
        "        triangle1 = np.array([points1[index1], points1[index2], points1[index3]], np.int32)\n",
        "        triangle2 = np.array([points2[index1], points2[index2], points2[index3]], np.int32)\n",
        "\n",
        "        rect1 = cv2.boundingRect(triangle1)\n",
        "        rect2 = cv2.boundingRect(triangle2)\n",
        "\n",
        "        cropped_tri1 = img1[rect1[1]:rect1[1]+rect1[3], rect1[0]:rect1[0]+rect1[2]]\n",
        "        cropped_tri2 = img2[rect2[1]:rect2[1]+rect2[3], rect2[0]:rect2[0]+rect2[2]]\n",
        "\n",
        "        cropped_tri1 = cv2.resize(cropped_tri1, (rect2[2], rect2[3]))\n",
        "\n",
        "        mask_tri = np.zeros((rect2[3], rect2[2], 3), dtype=np.uint8)\n",
        "        cv2.fillConvexPoly(mask_tri, triangle2 - np.array([rect2[:2]], dtype=np.int32), (255, 255, 255))\n",
        "\n",
        "        cropped_tri1 = cv2.bitwise_and(cropped_tri1, mask_tri)\n",
        "        cropped_tri2 = cv2.bitwise_and(cropped_tri2, mask_tri)\n",
        "\n",
        "        img2_face[rect2[1]:rect2[1]+rect2[3], rect2[0]:rect2[0]+rect2[2]] = cropped_tri1\n",
        "\n",
        "    result = cv2.addWeighted(img2, 0.4, img2_face, 0.6, 0)\n",
        "    return result\n",
        "\n",
        "# Step 5: Call the face swap function with the uploaded images\n",
        "output = face_swap(source_img_path, target_img_path)\n",
        "\n",
        "if output is not None:\n",
        "    # Display the result (works only on local machines or certain environments, not directly in Colab)\n",
        "    # For Colab, use `cv2_imshow` instead\n",
        "    from google.colab.patches import cv2_imshow\n",
        "    cv2_imshow(output)\n",
        "    cv2.waitKey(0)\n",
        "    cv2.destroyAllWindows()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# This will open a file picker to upload your images\n",
        "uploaded = files.upload()\n",
        "\n",
        "# List the uploaded files to check their names\n",
        "for filename in uploaded.keys():\n",
        "    print(f'Uploaded file: {filename}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 91
        },
        "id": "6JEvfRH6NHsV",
        "outputId": "f4fbf1ea-c096-4a6d-8a35-27f486e89b61"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-97594a64-0105-425d-bbd9-7b28bcd23ca5\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-97594a64-0105-425d-bbd9-7b28bcd23ca5\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving WhatsApp Image 2025-03-12 at 11.06.48 AM.jpeg to WhatsApp Image 2025-03-12 at 11.06.48 AM.jpeg\n",
            "Uploaded file: WhatsApp Image 2025-03-12 at 11.06.48 AM.jpeg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract shape predictor (already done)\n",
        "bz2_file_path = '/content/shape_predictor_68_face_landmarks (1).dat.bz2'\n",
        "dat_file_path = '/content/shape_predictor_68_face_landmarks.dat'\n",
        "\n",
        "# Extract the shape predictor file if needed (assuming it's in .bz2 format)\n",
        "import bz2\n",
        "import shutil\n",
        "\n",
        "with bz2.BZ2File(bz2_file_path, 'rb') as f_in:\n",
        "    with open(dat_file_path, 'wb') as f_out:\n",
        "        shutil.copyfileobj(f_in, f_out)\n",
        "\n",
        "print(\"Extraction complete!\")\n",
        "\n",
        "# Load the shape predictor model\n",
        "import dlib\n",
        "\n",
        "predictor = dlib.shape_predictor(dat_file_path)\n",
        "detector = dlib.get_frontal_face_detector()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZXo3uIx0NmWs",
        "outputId": "4227cd78-16db-4885-ff7d-e11f3a4199ac"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extraction complete!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import cv2\n",
        "import dlib\n",
        "import numpy as np\n",
        "import shutil\n",
        "import bz2\n",
        "\n",
        "# Step 1: Upload images (this will open a file picker)\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Step 2: List the uploaded files to check their names\n",
        "for filename in uploaded.keys():\n",
        "    print(f'Uploaded file: {filename}')\n",
        "\n",
        "# Set the correct paths to your uploaded source and target images\n",
        "source_img_path = '/content/WhatsApp Image 2025-03-12 at 11.06.48 AM (1).jpeg'  # Replace with actual file name\n",
        "target_img_path = '/content/WhatsApp Image 2025-03-12 at 11.06.48 AM.jpeg'  # Replace with actual file name\n",
        "\n",
        "# Load the shape predictor file for face landmarks (assuming it's uploaded too)\n",
        "bz2_file_path = '/content/shape_predictor_68_face_landmarks (1).dat.bz2'\n",
        "dat_file_path = '/content/shape_predictor_68_face_landmarks.dat'\n",
        "\n",
        "# Step 4: Extract the shape predictor file if needed (assuming it's in .bz2 format)\n",
        "with bz2.BZ2File(bz2_file_path, 'rb') as f_in:\n",
        "    with open(dat_file_path, 'wb') as f_out:\n",
        "        shutil.copyfileobj(f_in, f_out)\n",
        "\n",
        "print(\"Extraction complete!\")\n",
        "\n",
        "# Load the shape predictor model\n",
        "predictor = dlib.shape_predictor(dat_file_path)\n",
        "detector = dlib.get_frontal_face_detector()\n",
        "\n",
        "# Function to swap faces\n",
        "def extract_index_nparray(nparray):\n",
        "    index = None\n",
        "    for num in nparray[0]:\n",
        "        index = num\n",
        "        break\n",
        "    return index\n",
        "\n",
        "def face_swap(source_image, target_image):\n",
        "    img1 = cv2.imread(source_image)\n",
        "    img2 = cv2.imread(target_image)\n",
        "\n",
        "    # Check if images were loaded successfully\n",
        "    if img1 is None:\n",
        "        print(f\"Error: Could not load image {source_image}\")\n",
        "        return None\n",
        "    if img2 is None:\n",
        "        print(f\"Error: Could not load image {target_image}\")\n",
        "        return None\n",
        "\n",
        "    img1_gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n",
        "    img2_gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)\n",
        "\n",
        "    # Detect faces in images\n",
        "    faces1 = detector(img1_gray)\n",
        "    faces2 = detector(img2_gray)\n",
        "\n",
        "    if len(faces1) == 0 or len(faces2) == 0:\n",
        "        print(\"Face not detected in one of the images.\")\n",
        "        return None\n",
        "\n",
        "    # Get landmarks for both images\n",
        "    landmarks1 = predictor(img1_gray, faces1[0])\n",
        "    landmarks2 = predictor(img2_gray, faces2[0])\n",
        "\n",
        "    points1 = []\n",
        "    points2 = []\n",
        "\n",
        "    for n in range(68):\n",
        "        x1, y1 = landmarks1.part(n).x, landmarks1.part(n).y\n",
        "        x2, y2 = landmarks2.part(n).x, landmarks2.part(n).y\n",
        "        points1.append((x1, y1))\n",
        "        points2.append((x2, y2))\n",
        "\n",
        "    points1 = np.array(points1, np.int32)\n",
        "    points2 = np.array(points2, np.int32)\n",
        "\n",
        "    hull1 = cv2.convexHull(points1)\n",
        "    hull2 = cv2.convexHull(points2)\n",
        "\n",
        "    mask = np.zeros_like(img2_gray)\n",
        "    cv2.fillConvexPoly(mask, hull2, 255)\n",
        "\n",
        "    img2_face = cv2.bitwise_and(img2, img2, mask=mask)\n",
        "\n",
        "    rect = cv2.boundingRect(hull2)\n",
        "    subdiv = cv2.Subdiv2D(rect)\n",
        "    subdiv.insert(points2.tolist())\n",
        "    triangles = subdiv.getTriangleList()\n",
        "    triangles = np.array(triangles, dtype=np.int32)\n",
        "\n",
        "    for t in triangles:\n",
        "        pt1 = (t[0], t[1])\n",
        "        pt2 = (t[2], t[3])\n",
        "        pt3 = (t[4], t[5])\n",
        "\n",
        "        index1 = extract_index_nparray(np.where((points2 == pt1).all(axis=1)))\n",
        "        index2 = extract_index_nparray(np.where((points2 == pt2).all(axis=1)))\n",
        "        index3 = extract_index_nparray(np.where((points2 == pt3).all(axis=1)))\n",
        "\n",
        "        if index1 is None or index2 is None or index3 is None:\n",
        "            continue\n",
        "\n",
        "        triangle1 = np.array([points1[index1], points1[index2], points1[index3]], np.int32)\n",
        "        triangle2 = np.array([points2[index1], points2[index2], points2[index3]], np.int32)\n",
        "\n",
        "        rect1 = cv2.boundingRect(triangle1)\n",
        "        rect2 = cv2.boundingRect(triangle2)\n",
        "\n",
        "        cropped_tri1 = img1[rect1[1]:rect1[1]+rect1[3], rect1[0]:rect1[0]+rect1[2]]\n",
        "        cropped_tri2 = img2[rect2[1]:rect2[1]+rect2[3], rect2[0]:rect2[0]+rect2[2]]\n",
        "\n",
        "        cropped_tri1 = cv2.resize(cropped_tri1, (rect2[2], rect2[3]))\n",
        "\n",
        "        mask_tri = np.zeros((rect2[3], rect2[2], 3), dtype=np.uint8)\n",
        "        cv2.fillConvexPoly(mask_tri, triangle2 - np.array([rect2[:2]], dtype=np.int32), (255, 255, 255))\n",
        "\n",
        "        cropped_tri1 = cv2.bitwise_and(cropped_tri1, mask_tri)\n",
        "        cropped_tri2 = cv2.bitwise_and(cropped_tri2, mask_tri)\n",
        "\n",
        "        img2_face[rect2[1]:rect2[1]+rect2[3], rect2[0]:rect2[0]+rect2[2]] = cropped_tri1\n",
        "\n",
        "    result = cv2.addWeighted(img2, 0.4, img2_face, 0.6, 0)\n",
        "    return result\n",
        "\n",
        "# Step 5: Call the face swap function with the uploaded images\n",
        "output = face_swap(source_img_path, target_img_path)\n",
        "\n",
        "if output is not None:\n",
        "    # Display the result (works in Colab)\n",
        "    from google.colab.patches import cv2_imshow\n",
        "    cv2_imshow(output)\n",
        "    cv2.waitKey(0)\n",
        "    cv2.destroyAllWindows()\n",
        "from mtcnn import MTCNN\n",
        "\n",
        "detector = MTCNN()\n",
        "\n",
        "def detect_faces_mtcnn(image):\n",
        "    # Detect faces using MTCNN\n",
        "    faces = detector.detect_faces(image)\n",
        "    return faces\n",
        "\n",
        "def face_swap(source_image, target_image):\n",
        "    img1 = cv2.imread(source_image)\n",
        "    img2 = cv2.imread(target_image)\n",
        "\n",
        "    # Check if images were loaded successfully\n",
        "    if img1 is None or img2 is None:\n",
        "        print(f\"Error: Could not load image\")\n",
        "        return None\n",
        "\n",
        "    # Convert images to RGB for MTCNN\n",
        "    img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)\n",
        "    img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)\n",
        "\n",
        "    # Detect faces using MTCNN\n",
        "    faces1 = detect_faces_mtcnn(img1_rgb)\n",
        "    faces2 = detect_faces_mtcnn(img2_rgb)\n",
        "\n",
        "    if not faces1 or not faces2:\n",
        "        print(\"Face not detected in one of the images.\")\n",
        "        return None\n",
        "\n",
        "    # Extract landmarks for each face\n",
        "    landmarks1 = faces1[0]['keypoints']\n",
        "    landmarks2 = faces2[0]['keypoints']\n",
        "\n",
        "    points1 = [(landmarks1['left_eye'][0], landmarks1['left_eye'][1]),\n",
        "               (landmarks1['right_eye'][0], landmarks1['right_eye'][1]),\n",
        "               (landmarks1['nose'][0], landmarks1['nose'][1]),\n",
        "               (landmarks1['mouth_left'][0], landmarks1['mouth_left'][1]),\n",
        "               (landmarks1['mouth_right'][0], landmarks1['mouth_right'][1])]\n",
        "\n",
        "    points2 = [(landmarks2['left_eye'][0], landmarks2['left_eye'][1]),\n",
        "               (landmarks2['right_eye'][0], landmarks2['right_eye'][1]),\n",
        "               (landmarks2['nose'][0], landmarks2['nose'][1]),\n",
        "               (landmarks2['mouth_left'][0], landmarks2['mouth_left'][1]),\n",
        "               (landmarks2['mouth_right'][0], landmarks2['mouth_right'][1])]\n",
        "\n",
        "    # Convert to numpy array\n",
        "    points1 = np.array(points1, np.int32)\n",
        "    points2 = np.array(points2, np.int32)\n",
        "\n",
        "    # Use the rest of your face swapping code\n",
        "    # Code for convex hulls, triangles, etc.\n",
        "\n",
        "    return result\n",
        "\n",
        "# Function for affine transformation (image warping)\n",
        "def warp_image(img, points1, points2):\n",
        "    # Calculate the affine transform matrix\n",
        "    M = cv2.getAffineTransform(np.float32(points1), np.float32(points2))\n",
        "    warped_img = cv2.warpAffine(img, M, (img.shape[1], img.shape[0]), flags=cv2.INTER_LINEAR)\n",
        "    return warped_img\n",
        "\n",
        "    import cv2\n",
        "import dlib\n",
        "import numpy as np\n",
        "import time\n",
        "\n",
        "# Load the dlib face detector and shape predictor\n",
        "detector = dlib.get_frontal_face_detector()\n",
        "predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')  # Make sure the shape predictor is available\n",
        "\n",
        "# Function to extract landmarks from the detected face\n",
        "def get_landmarks(image, face):\n",
        "    landmarks = predictor(image, face)\n",
        "    points = []\n",
        "    for n in range(68):\n",
        "        points.append((landmarks.part(n).x, landmarks.part(n).y))\n",
        "    return np.array(points, np.int32)\n",
        "\n",
        "# Function to apply affine transformation (warping) to the face\n",
        "def warp_face(img, points1, points2):\n",
        "    # Get the affine transformation matrix\n",
        "    M = cv2.getAffineTransform(np.float32(points1[:3]), np.float32(points2[:3]))\n",
        "    warped_face = cv2.warpAffine(img, M, (img.shape[1], img.shape[0]), flags=cv2.INTER_LINEAR)\n",
        "    return warped_face\n",
        "\n",
        "# Function to blend the swapped face into the target image using seamless cloning\n",
        "def seamless_clone(target_img, face_img, mask, center):\n",
        "    return cv2.seamlessClone(face_img, target_img, mask, center, cv2.NORMAL_CLONE)\n",
        "\n",
        "# Start the webcam feed\n",
        "cap = cv2.VideoCapture(0)  # 0 is usually the default webcam\n",
        "\n",
        "while True:\n",
        "    # Capture a frame from the webcam\n",
        "    ret, frame = cap.read()\n",
        "    if not ret:\n",
        "        break\n",
        "\n",
        "    # Convert the frame to grayscale\n",
        "    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "\n",
        "    # Detect faces in the frame\n",
        "    faces = detector(gray)\n",
        "    if len(faces) == 0:\n",
        "        continue\n",
        "\n",
        "    # Get the landmarks for the first detected face\n",
        "    face = faces[0]\n",
        "    landmarks = get_landmarks(gray, face)\n",
        "\n",
        "    # Draw landmarks for debugging\n",
        "    for point in landmarks:\n",
        "        cv2.circle(frame, tuple(point), 2, (0, 255, 0), -1)\n",
        "\n",
        "    # Extract the source face and warp it to the target frame\n",
        "    face_img = frame[face.top():face.bottom(), face.left():face.right()]\n",
        "    face_points = landmarks\n",
        "\n",
        "    # Assuming another face image (source) to swap with - for real-time you can switch between webcam frames\n",
        "    # You can replace this with another real-time face if you want a specific one.\n",
        "    target_img = frame  # Use the same frame as target for now\n",
        "\n",
        "    # Here you would use the warped face on the target image, but we are simulating\n",
        "    # with the same webcam frame, so you can implement your face swap logic.\n",
        "\n",
        "    # Display the result\n",
        "    cv2.imshow('Real-Time Face Swap', frame)\n",
        "\n",
        "    # Press 'q' to quit\n",
        "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
        "        break\n",
        "\n",
        "# Release the webcam and close windows\n",
        "cap.release()\n",
        "cv2.destroyAllWindows()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 749
        },
        "id": "4WSV9RZrOClf",
        "outputId": "c9b9f8b3-68f2-4ab0-8e1f-4fddda0ba30a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-3f48b8e2-46b0-4267-9660-b2e34765f900\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-3f48b8e2-46b0-4267-9660-b2e34765f900\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving shape_predictor_68_face_landmarks (1).dat.bz2 to shape_predictor_68_face_landmarks (1).dat (5).bz2\n",
            "Uploaded file: shape_predictor_68_face_landmarks (1).dat (5).bz2\n",
            "Extraction complete!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=480x640>"
            ],
            "image/png": "\n",
            "image/jpeg": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install mtcnn\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AhBecxvExSEJ",
        "outputId": "1fc326c4-5ad9-49e0-a774-e7a14c3cabfe"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting mtcnn\n",
            "  Downloading mtcnn-1.0.0-py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: joblib>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from mtcnn) (1.4.2)\n",
            "Collecting lz4>=4.3.3 (from mtcnn)\n",
            "  Downloading lz4-4.4.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.8 kB)\n",
            "Downloading mtcnn-1.0.0-py3-none-any.whl (1.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m17.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading lz4-4.4.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m45.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: lz4, mtcnn\n",
            "Successfully installed lz4-4.4.3 mtcnn-1.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from mtcnn import MTCNN\n",
        "\n",
        "detector = MTCNN()\n",
        "\n",
        "def detect_faces_mtcnn(image):\n",
        "    # Detect faces using MTCNN\n",
        "    faces = detector.detect_faces(image)\n",
        "    return faces\n",
        "\n",
        "def face_swap(source_image, target_image):\n",
        "    img1 = cv2.imread(source_image)\n",
        "    img2 = cv2.imread(target_image)\n",
        "\n",
        "    # Check if images were loaded successfully\n",
        "    if img1 is None or img2 is None:\n",
        "        print(f\"Error: Could not load image\")\n",
        "        return None\n",
        "\n",
        "    # Convert images to RGB for MTCNN\n",
        "    img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)\n",
        "    img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)\n",
        "\n",
        "    # Detect faces using MTCNN\n",
        "    faces1 = detect_faces_mtcnn(img1_rgb)\n",
        "    faces2 = detect_faces_mtcnn(img2_rgb)\n",
        "\n",
        "    if not faces1 or not faces2:\n",
        "        print(\"Face not detected in one of the images.\")\n",
        "        return None\n",
        "\n",
        "    # Extract landmarks for each face\n",
        "    landmarks1 = faces1[0]['keypoints']\n",
        "    landmarks2 = faces2[0]['keypoints']\n",
        "\n",
        "    points1 = [(landmarks1['left_eye'][0], landmarks1['left_eye'][1]),\n",
        "               (landmarks1['right_eye'][0], landmarks1['right_eye'][1]),\n",
        "               (landmarks1['nose'][0], landmarks1['nose'][1]),\n",
        "               (landmarks1['mouth_left'][0], landmarks1['mouth_left'][1]),\n",
        "               (landmarks1['mouth_right'][0], landmarks1['mouth_right'][1])]\n",
        "\n",
        "    points2 = [(landmarks2['left_eye'][0], landmarks2['left_eye'][1]),\n",
        "               (landmarks2['right_eye'][0], landmarks2['right_eye'][1]),\n",
        "               (landmarks2['nose'][0], landmarks2['nose'][1]),\n",
        "               (landmarks2['mouth_left'][0], landmarks2['mouth_left'][1]),\n",
        "               (landmarks2['mouth_right'][0], landmarks2['mouth_right'][1])]\n",
        "\n",
        "    # Convert to numpy array\n",
        "    points1 = np.array(points1, np.int32)\n",
        "    points2 = np.array(points2, np.int32)\n",
        "\n",
        "    # Use the rest of your face swapping code\n",
        "    # Code for convex hulls, triangles, etc.\n",
        "\n",
        "    return result\n"
      ],
      "metadata": {
        "id": "TAj70viDxKGd"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import dlib\n",
        "import numpy as np\n",
        "import time\n",
        "\n",
        "# Load the dlib face detector and shape predictor\n",
        "detector = dlib.get_frontal_face_detector()\n",
        "predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')  # Make sure the shape predictor is available\n",
        "\n",
        "# Function to extract landmarks from the detected face\n",
        "def get_landmarks(image, face):\n",
        "    landmarks = predictor(image, face)\n",
        "    points = []\n",
        "    for n in range(68):\n",
        "        points.append((landmarks.part(n).x, landmarks.part(n).y))\n",
        "    return np.array(points, np.int32)\n",
        "\n",
        "# Function to apply affine transformation (warping) to the face\n",
        "def warp_face(img, points1, points2):\n",
        "    # Get the affine transformation matrix\n",
        "    M = cv2.getAffineTransform(np.float32(points1[:3]), np.float32(points2[:3]))\n",
        "    warped_face = cv2.warpAffine(img, M, (img.shape[1], img.shape[0]), flags=cv2.INTER_LINEAR)\n",
        "    return warped_face\n",
        "\n",
        "# Function to blend the swapped face into the target image using seamless cloning\n",
        "def seamless_clone(target_img, face_img, mask, center):\n",
        "    return cv2.seamlessClone(face_img, target_img, mask, center, cv2.NORMAL_CLONE)\n",
        "\n",
        "# Start the webcam feed\n",
        "cap = cv2.VideoCapture(0)  # 0 is usually the default webcam\n",
        "\n",
        "while True:\n",
        "    # Capture a frame from the webcam\n",
        "    ret, frame = cap.read()\n",
        "    if not ret:\n",
        "        break\n",
        "\n",
        "    # Convert the frame to grayscale\n",
        "    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "\n",
        "    # Detect faces in the frame\n",
        "    faces = detector(gray)\n",
        "    if len(faces) == 0:\n",
        "        continue\n",
        "\n",
        "    # Get the landmarks for the first detected face\n",
        "    face = faces[0]\n",
        "    landmarks = get_landmarks(gray, face)\n",
        "\n",
        "    # Draw landmarks for debugging\n",
        "    for point in landmarks:\n",
        "        cv2.circle(frame, tuple(point), 2, (0, 255, 0), -1)\n",
        "\n",
        "    # Extract the source face and warp it to the target frame\n",
        "    face_img = frame[face.top():face.bottom(), face.left():face.right()]\n",
        "    face_points = landmarks\n",
        "\n",
        "    # Assuming another face image (source) to swap with - for real-time you can switch between webcam frames\n",
        "    # You can replace this with another real-time face if you want a specific one.\n",
        "    target_img = frame  # Use the same frame as target for now\n",
        "\n",
        "    # Here you would use the warped face on the target image, but we are simulating\n",
        "    # with the same webcam frame, so you can implement your face swap logic.\n",
        "\n",
        "    # Display the result\n",
        "    cv2.imshow('Real-Time Face Swap', frame)\n",
        "\n",
        "    # Press 'q' to quit\n",
        "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
        "        break\n",
        "\n",
        "# Release the webcam and close windows\n",
        "cap.release()\n",
        "cv2.destroyAllWindows()\n"
      ],
      "metadata": {
        "id": "egMkm5KY6oR4"
      },
      "execution_count": 17,
      "outputs": []
    }
  ]
}